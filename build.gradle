import java.text.SimpleDateFormat

plugins {
    id "org.springframework.boot" version "${spring_boot_version}" apply false
}

def javaVersion = System.getProperty("java.version")
if (!javaVersion.startsWith("11")) {
    throw new RuntimeException("Incompatible JRE version: " + javaVersion + ". Use JRE 11 instead.")
}

subprojects { project ->
    group = "io.github.gcdd1993"
    version root_version

    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    jar {
        enabled = true
        manifest {
            attributes(
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.version,
                    "Built-By": System.properties["user.name"],
                    "Build-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                    "Created-By": "Gradle ${gradle.gradleVersion}",
                    "Build-Jdk": "${System.properties["java.version"]} (${System.properties["java.vendor"]} ${System.properties["java.vm.version"]})",
                    "Build-OS": "${System.properties["os.name"]} ${System.properties["os.arch"]} ${System.properties["os.version"]}"
            )
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    dependencies {
        compileOnly("org.projectlombok:lombok:1.18.22")
        annotationProcessor("org.projectlombok:lombok:1.18.22")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("org.projectlombok:lombok:1.18.22")
        testImplementation("com.github.jsonzou:jmockdata")
        testAnnotationProcessor("org.projectlombok:lombok:1.18.22")
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_version}")
        }
        dependencies {
            dependency("org.mapstruct:mapstruct:${mapstruct_version}")
            dependency("org.mapstruct:mapstruct-processor:${mapstruct_version}")
            dependency("org.redisson:redisson-spring-boot-starter:${redisson_version}")
            dependency("com.aliyun:aliyun-java-sdk-core:${aliyun_sdk_core_version}")
            dependency("com.aliyun.oss:aliyun-sdk-oss:${aliyun_sdk_oss_version}")
            dependency("com.aliyun:aliyun-java-sdk-dysmsapi:${aliyun_dysms_api_version}")
            dependency("com.github.bingoohuang:patchca:${patchca_version}")
            dependency("io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter:${opentracing_jaeger_version}")
            dependency("com.github.jsonzou:jmockdata:${jmockdata_version}")
            dependency("io.netty:netty-all:$netty_version")
            dependency("org.mybatis.spring.boot:mybatis-spring-boot-starter:$mybatis_version")
            dependency("com.alibaba:druid-spring-boot-starter:$druid_version")
            dependency("org.apache.rocketmq:rocketmq-client:$rocketmq_version")
            dependency("org.apache.rocketmq:rocketmq-openmessaging:$rocketmq_version")
        }
    }

    test {
        useJUnitPlatform()
    }

    repositories {
        mavenLocal()
        maven { url = uri("https://maven.aliyun.com/repository/central") } // central
        maven { url = uri("https://maven.aliyun.com/repository/public") } // jcenter & public
        maven { url = uri("https://maven.aliyun.com/repository/google") } // google
        maven { url = uri("https://maven.aliyun.com/repository/spring") } // spring
        maven { url = uri("https://maven.aliyun.com/repository/spring-plugin") } // spring plugin
        maven { url = uri("https://maven.aliyun.com/repository/grails-core") } // spring plugin
    }

}